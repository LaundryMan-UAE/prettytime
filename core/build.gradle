/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'marcussmith' at '01/09/14 16:57' with Gradle 2.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html
 */
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    testCompile "junit:junit:4.11"
}

task cycleFinder(type:Exec) {
    inputs.files configurations.runtime.allDependencies.dependencyProject.sourceSets.main.allJava.inject(sourceSets.main.allJava) { acc, val -> acc.plus(val) }
    executable "${J2OBJC_HOME}/cycle_finder"
    args '-sourcepath', (sourceSets.main.allJava.srcDirs + configurations.runtime.allDependencies.dependencyProject.sourceSets.main.allJava.srcDirs.flatten()).join(':')
    args '-classpath', "${J2OBJC_HOME}/lib/guava-14.0.1.jar:${J2OBJC_HOME}/lib/jsr305-2.0.2.jar"
    args inputs.files
}

task translateJava(type:Exec) {
    inputs.files configurations.runtime.allDependencies.dependencyProject.sourceSets.main.allJava.inject(sourceSets.main.allJava) { acc, val -> acc.plus(val) }

    // the classpath is built from the runtime dependencies for the sourcesets ...
    executable "${J2OBJC_HOME}/j2objc"
    args '--doc-comments'
    args '-d', file('src/gen/objc').path
    args '-sourcepath', (sourceSets.main.allJava.srcDirs + configurations.runtime.allDependencies.dependencyProject.sourceSets.main.allJava.srcDirs.flatten()).join(':')
    args '-classpath', sourceSets.main.runtimeClasspath.collect { it.absolutePath }.join(':')
    args inputs.files
}

task translateTestJava(type:Exec, dependsOn: translateJava) {
    inputs.files configurations.runtime.allDependencies.dependencyProject.sourceSets.test.allJava.inject(sourceSets.test.allJava) { acc, val -> acc.plus(val) }

    executable "${J2OBJC_HOME}/j2objc"
    args '--prefixes', file('src/main/resources/prefixes.properties').path
    args '--no-package-directories'
    args '-d', buildDir
    args '-sourcepath', (sourceSets.main.allJava.srcDirs + sourceSets.test.allJava.srcDirs + configurations.runtime.allDependencies.dependencyProject.sourceSets.main.allJava.srcDirs.flatten() + configurations.runtime.allDependencies.dependencyProject.sourceSets.test.allJava.srcDirs.flatten()).join(':')
    args '-classpath', "${J2OBJC_HOME}/lib/junit-4.10.jar"
    args inputs.files
}

task compileTestObjC(type:Exec, dependsOn: translateTestJava) {
    inputs.files fileTree(dir: buildDir, includes: ['**/*.h','**/*.m']).plus(fileTree(dir: file('src/main/objc'), includes: ['**/*.h','**/*.m']))
    outputs.files file("$buildDir/testrunner")
    executable "${J2OBJC_HOME}/j2objcc"
    workingDir buildDir
    args "-I$buildDir", "-I${file('src/gen/objc').path}"
    args "-ObjC", "-ljunit"
    args "-o", "testrunner"
    fileTree(dir: buildDir, include: '**/*.m').files.each { i ->
        args i.path
    }
    fileTree(dir: file('src/gen/objc'), include: '**/*.m').files.each { i ->
        args i.path
    }
}

task testObjC(type:Exec, dependsOn: compileTestObjC) {
    inputs.files file("$buildDir/testrunner")
    executable file("$buildDir/testrunner")
    args 'org.junit.runner.JUnitCore'
    args sourceSets.test.allJava.files.findAll { f -> f.name.endsWith('Test.java')}*.path*.replace("${sourceSets.test.java.srcDirs.iterator().next().path}/", '')*.replace('.java', '')*.replace('/', '.')
    configurations.runtime.allDependencies.dependencyProject.sourceSets.test.allJava.each { i ->
        args i.files.findAll { f -> f.name.endsWith('Test.java')}*.path*.replace("${i.srcDirs.iterator().next().path}/", '')*.replace('.java', '')*.replace('/', '.')
    }
}

task debug << {
    println ();
}
