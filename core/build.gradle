/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'marcussmith' at '01/09/14 16:57' with Gradle 2.0
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.0/userguide/tutorial_java_projects.html
 */
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    testCompile "junit:junit:4.11"
}

task j2objc(type:Exec) {

    System.setProperty("java.library.path", "$buildDir/classes/main")
    println "$buildDir/classes/main"
    description 'The j2objc tool translates specified Java source files into Objective-C sources for use in an iOS application.'
    inputs.files sourceSets.main.allJava + sourceSets.test.allJava
    outputs.files fileTree(dir: file('src/gen/objc').path, includes: ['**/*.h','**/*.m'])
    executable "${J2OBJC_HOME}/j2objc"
    args '-use-arc', '--no-package-directories'
    args '-d', file('src/gen/objc').path
    args '-sourcepath', (sourceSets.main.allJava.srcDirs + sourceSets.test.allJava.srcDirs).join(':')
    args '-classpath', "${J2OBJC_HOME}/lib/junit-4.10.jar"
    args sourceSets.main.allJava + sourceSets.test.allJava
}

task j2objcc(type:Exec, dependsOn: j2objc) {
    description 'j2objcc is a convenience script to simplify compiling Objective-C or Objective-C++ files created by j2objc.'
    inputs.files fileTree(dir: file('src/gen/objc').path, includes: ['**/*.h','**/*.m'])
    outputs.files file("$buildDir/testrunner")
    executable "${J2OBJC_HOME}/j2objcc"
    workingDir buildDir
    args "-ObjC", "-ljunit", "-I$buildDir", "-I${file('src/gen/objc').path}"
    args "-o", "testrunner"
    fileTree(dir: buildDir, include: '**/*.m').files.each { i ->
        args i.path
    }
    fileTree(dir: file('src/gen/objc'), include: '**/*.m').files.each { i ->
        args i.path
    }

}

task testj2objc(type:Exec, dependsOn: j2objcc) {
    description 'Execute JUnit tests as binaries on OS X'
    inputs.files file("$buildDir/testrunner")
    executable file("$buildDir/testrunner")
    args 'org.junit.runner.JUnitCore'
    args sourceSets.test.allJava.files.findAll { f -> f.name.endsWith('Test.java')}*.path*.replace("${sourceSets.test.java.srcDirs.iterator().next().path}/", '')*.replace('.java', '')*.replace('/', '.')
}

task debug {
    doLast {
        println sourceSets.test.allJava.files.findAll { f -> f.name.endsWith('Test.java')}*.path*.replace("${sourceSets.test.java.srcDirs.iterator().next().path}/", '')*.replace('.java', '')*.replace('/', '.').join(' ')
    }
}

