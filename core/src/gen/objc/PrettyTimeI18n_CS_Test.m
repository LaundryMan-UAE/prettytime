//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/myforks/prettytime/core/src/test/java/org/ocpsoft/prettytime/PrettyTimeI18n_CS_Test.java
//

#include "IOSClass.h"
#include "JustNow.h"
#include "Month.h"
#include "PrettyTime.h"
#include "PrettyTimeI18n_CS_Test.h"
#include "TimeFormat.h"
#include "TimeUnit.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/AfterClass.h"
#include "org/junit/Assert.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/Test.h"

@implementation OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test

JavaUtilLocale * OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test_locale_;

+ (void)setUp {
  OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test_locale_ = [JavaUtilLocale getDefault];
  [JavaUtilLocale setDefaultWithJavaUtilLocale:[[JavaUtilLocale alloc] initWithNSString:@"cs"]];
}

- (void)testCeilingInterval {
  JavaUtilDate *then = [((JavaTextSimpleDateFormat *) nil_chk(format_)) parseWithNSString:@"5/20/2009"];
  JavaUtilDate *ref = [format_ parseWithNSString:@"6/17/2009"];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:ref];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 1 m\u011bs\u00edcem" withId:[t formatWithJavaUtilDate:then]];
}

- (void)testRightNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] init];
  [OrgJunitAssert assertEqualsWithId:@"za chv\u00edli" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] init]]];
}

- (void)testRightNowVariance {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za chv\u00edli" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:600]]];
}

- (void)testMinutesFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong u in nil_chk([t getUnits])) {
    if ([(id) u isKindOfClass:[OrgOcpsoftPrettytimeUnitsJustNow class]]) {
      [((OrgOcpsoftPrettytimeUnitsJustNow *) nil_chk(((OrgOcpsoftPrettytimeUnitsJustNow *) check_class_cast(u, [OrgOcpsoftPrettytimeUnitsJustNow class])))) setMaxQuantityWithLong:1000LL];
    }
  }
  [OrgJunitAssert assertEqualsWithId:@"za 1 minutu" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 1]]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 minuty" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 3]]];
  [OrgJunitAssert assertEqualsWithId:@"za 12 minut" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 12]]];
}

- (void)testHoursFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za 1 hodinu" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 1]]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 hodiny" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 3]]];
  [OrgJunitAssert assertEqualsWithId:@"za 10 hodin" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 10]]];
}

- (void)testDaysFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za 1 den" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 1]]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 dny" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 3]]];
  [OrgJunitAssert assertEqualsWithId:@"za 5 dn\u00ed" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 5]]];
}

- (void)testWeeksFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong u in nil_chk([t getUnits])) {
    if ([(id) u isKindOfClass:[OrgOcpsoftPrettytimeUnitsMonth class]]) {
      (void) [t removeUnitWithOrgOcpsoftPrettytimeTimeUnit:u];
    }
  }
  [OrgJunitAssert assertEqualsWithId:@"za 1 t\u00fdden" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 7 * 1LL]]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 t\u00fddny" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 7 * 3LL]]];
  [OrgJunitAssert assertEqualsWithId:@"za 5 t\u00fddn\u016f" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 7 * 5LL]]];
}

- (void)testMonthsFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za 1 m\u011bs\u00edc" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:2629743830LL * 1LL]]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 m\u011bs\u00edce" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:2629743830LL * 3LL]]];
  [OrgJunitAssert assertEqualsWithId:@"za 6 m\u011bs\u00edc\u016f" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:2629743830LL * 6LL]]];
}

- (void)testYearsFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za 1 rok" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:2629743830LL * 12LL * 1LL]]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 roky" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:2629743830LL * 12LL * 3LL]]];
  [OrgJunitAssert assertEqualsWithId:@"za 9 let" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:2629743830LL * 12LL * 9LL]]];
}

- (void)testDecadesFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 desetilet\u00ed" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:315569259747LL * 3LL]]];
}

- (void)testCenturiesFromNow {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 stolet\u00ed" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:3155692597470LL * 3LL]]];
}

- (void)testMomentsAgo {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:6000]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed chv\u00edl\u00ed" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]]];
}

- (void)testMinutesAgo {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 12]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 12 minutami" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]]];
}

- (void)testHoursAgo {
  JavaUtilDate *base = [[JavaUtilDate alloc] init];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:base];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 1 hodinou" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-1 withInt:JavaUtilCalendar_HOUR_OF_DAY]]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 hodinami" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-3 withInt:JavaUtilCalendar_HOUR_OF_DAY]]];
}

- (void)testDaysAgo {
  JavaUtilDate *base = [[JavaUtilDate alloc] init];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:base];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 1 dnem" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-1 withInt:JavaUtilCalendar_DAY_OF_MONTH]]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 dny" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-3 withInt:JavaUtilCalendar_DAY_OF_MONTH]]];
}

- (void)testWeeksAgo {
  JavaUtilDate *base = [[JavaUtilDate alloc] init];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:base];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 1 t\u00fddnem" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-1 withInt:JavaUtilCalendar_WEEK_OF_MONTH]]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 t\u00fddny" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-3 withInt:JavaUtilCalendar_WEEK_OF_MONTH]]];
}

- (void)testMonthsAgo {
  JavaUtilDate *base = [[JavaUtilDate alloc] init];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:base];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 1 m\u011bs\u00edcem" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-1 withInt:JavaUtilCalendar_MONTH]]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 m\u011bs\u00edci" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-3 withInt:JavaUtilCalendar_MONTH]]];
}

- (void)testYearsAgo {
  JavaUtilDate *base = [[JavaUtilDate alloc] init];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:base];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong u in nil_chk([t getUnits])) {
    if ([(id) u isKindOfClass:[OrgOcpsoftPrettytimeUnitsMonth class]]) {
      (void) [t removeUnitWithOrgOcpsoftPrettytimeTimeUnit:u];
    }
  }
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 1 rokem" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-1 withInt:JavaUtilCalendar_YEAR]]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 roky" withId:[t formatWithJavaUtilDate:[self addTimeWithJavaUtilDate:base withInt:-3 withInt:JavaUtilCalendar_YEAR]]];
}

- (void)testDecadesAgo {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:315569259747LL * 3LL]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 desetilet\u00edmi" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]]];
}

- (void)testCenturiesAgo {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:3155692597470LL * 3LL]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 stolet\u00edmi" withId:[t formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]]];
}

- (void)testFormattingDurationListInThePast {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 3 + 1000 * 60 * 60 * 15 + 1000 * 60 * 38]];
  id<JavaUtilList> durations = [t calculatePreciseDurationWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  [OrgJunitAssert assertEqualsWithId:@"p\u0159ed 3 dny 15 hodinami 38 minutami" withId:[t formatWithJavaUtilList:durations]];
}

- (void)testFormattingDurationListInTheFuture {
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] initWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:0]];
  id<JavaUtilList> durations = [t calculatePreciseDurationWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:1000 * 60 * 60 * 24 * 3 + 1000 * 60 * 60 * 15 + 1000 * 60 * 38]];
  [OrgJunitAssert assertEqualsWithId:@"za 3 dny 15 hodin 38 minut" withId:[t formatWithJavaUtilList:durations]];
}

- (void)testFormatApproximateDuration {
  long long int tenMinMillis = [((JavaUtilConcurrentTimeUnitEnum *) nil_chk(JavaUtilConcurrentTimeUnitEnum_get_MINUTES())) toMillisWithLong:10];
  JavaUtilDate *tenMinAgo = [[JavaUtilDate alloc] initWithLong:[JavaLangSystem currentTimeMillis] - tenMinMillis];
  OrgOcpsoftPrettytimePrettyTime *t = [[OrgOcpsoftPrettytimePrettyTime alloc] init];
  NSString *result = [t formatApproximateDurationWithJavaUtilDate:tenMinAgo];
  [OrgJunitAssert assertEqualsWithId:@"10 minutami" withId:result];
}

+ (void)tearDown {
  [JavaUtilLocale setDefaultWithJavaUtilLocale:OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test_locale_];
}

- (JavaUtilDate *)addTimeWithJavaUtilDate:(JavaUtilDate *)time
                                  withInt:(int)amount
                                  withInt:(int)field {
  JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:time];
  [calendar addWithInt:field withInt:amount];
  return [calendar getTime];
}

- (instancetype)init {
  if (self = [super init]) {
    format_ = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"MM/dd/yyyy"];
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test *)other {
  [super copyAllFieldsTo:other];
  other->format_ = format_;
}
+ (IOSObjectArray *)__annotations_setUp {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitBeforeClass alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testCeilingInterval {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testRightNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testRightNowVariance {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testMinutesFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testHoursFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testDaysFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testWeeksFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testMonthsFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testYearsFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testDecadesFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testCenturiesFromNow {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testMomentsAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testMinutesAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testHoursAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testDaysAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testWeeksAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testMonthsAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testYearsAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testDecadesAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testCenturiesAgo {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testFormattingDurationListInThePast {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testFormattingDurationListInTheFuture {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_testFormatApproximateDuration {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitTest alloc] initWithExpected:[[OrgJunitTest_None class] getClass] withTimeout:0] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_tearDown {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[OrgJunitAfterClass alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "setUp", NULL, "V", 0x9, "Ljava.lang.Exception;" },
    { "testCeilingInterval", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testRightNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testRightNowVariance", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testMinutesFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testHoursFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testDaysFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testWeeksFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testMonthsFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testYearsFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testDecadesFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testCenturiesFromNow", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testMomentsAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testMinutesAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testHoursAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testDaysAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testWeeksAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testMonthsAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testYearsAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testDecadesAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testCenturiesAgo", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testFormattingDurationListInThePast", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testFormattingDurationListInTheFuture", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "testFormatApproximateDuration", NULL, "V", 0x1, "Ljava.lang.Exception;" },
    { "tearDown", NULL, "V", 0x9, "Ljava.lang.Exception;" },
    { "addTimeWithJavaUtilDate:withInt:withInt:", "addTime", "Ljava.util.Date;", 0x2, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "format_", NULL, 0x0, "Ljava.text.SimpleDateFormat;", NULL,  },
    { "locale_", NULL, 0xa, "Ljava.util.Locale;", &OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test_locale_,  },
  };
  static J2ObjcClassInfo _OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test = { "PrettyTimeI18n_CS_Test", "org.ocpsoft.prettytime", NULL, 0x1, 27, methods, 2, fields, 0, NULL};
  return &_OrgOcpsoftPrettytimePrettyTimeI18n_CS_Test;
}

@end
