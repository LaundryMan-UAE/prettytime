//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nbransby/Documents/prettytime/core/src/main/java/org/ocpsoft/prettytime/PrettyTime.java
//

#include "Century.h"
#include "Day.h"
#include "Decade.h"
#include "Duration.h"
#include "DurationImpl.h"
#include "Hour.h"
#include "IOSClass.h"
#include "JustNow.h"
#include "LocaleAware.h"
#include "Millennium.h"
#include "Millisecond.h"
#include "Minute.h"
#include "Month.h"
#include "PrettyTime.h"
#include "ResourcesTimeFormat.h"
#include "ResourcesTimeUnit.h"
#include "Second.h"
#include "TimeFormat.h"
#include "TimeUnit.h"
#include "TimeUnitComparator.h"
#include "Week.h"
#include "Year.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation OrgOcpsoftPrettytimePrettyTime

- (instancetype)initOrgOcpsoftPrettytimePrettyTime {
  if (self = [super init]) {
    locale_ = JavaUtilLocale_getDefault();
    units_ = [[JavaUtilLinkedHashMap alloc] init];
    [self initTimeUnits];
  }
  return self;
}

- (instancetype)init {
  return [self initOrgOcpsoftPrettytimePrettyTime];
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)reference {
  if (self = [self initOrgOcpsoftPrettytimePrettyTime]) {
    (void) [self setReferenceWithJavaUtilDate:reference];
  }
  return self;
}

- (instancetype)initOrgOcpsoftPrettytimePrettyTimeWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    locale_ = JavaUtilLocale_getDefault();
    units_ = [[JavaUtilLinkedHashMap alloc] init];
    (void) [self setLocaleWithJavaUtilLocale:locale];
    [self initTimeUnits];
  }
  return self;
}

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initOrgOcpsoftPrettytimePrettyTimeWithJavaUtilLocale:locale];
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)reference
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [self initOrgOcpsoftPrettytimePrettyTimeWithJavaUtilLocale:locale]) {
    (void) [self setReferenceWithJavaUtilDate:reference];
  }
  return self;
}

- (id<OrgOcpsoftPrettytimeDuration>)approximateDurationWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Date to approximate must not be null."];
  JavaUtilDate *ref = reference_;
  if (nil == ref) ref = [[JavaUtilDate alloc] init];
  jlong difference = [((JavaUtilDate *) nil_chk(then)) getTime] - [((JavaUtilDate *) nil_chk(ref)) getTime];
  return [self calculateDurationWithLong:difference];
}

- (void)initTimeUnits {
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsJustNow alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsMillisecond alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsSecond alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsMinute alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsHour alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsDay alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsWeek alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsMonth alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsYear alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsDecade alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsCentury alloc] init]];
  [self addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:[[OrgOcpsoftPrettytimeUnitsMillennium alloc] init]];
}

- (void)addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:(OrgOcpsoftPrettytimeImplResourcesTimeUnit *)unit {
  (void) [self registerUnitWithOrgOcpsoftPrettytimeTimeUnit:unit withOrgOcpsoftPrettytimeTimeFormat:[[OrgOcpsoftPrettytimeImplResourcesTimeFormat alloc] initWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:unit]];
}

- (id<OrgOcpsoftPrettytimeDuration>)calculateDurationWithLong:(jlong)difference {
  jlong absoluteDifference = JavaLangMath_absWithLong_(difference);
  id<JavaUtilList> localUnits = [self getUnits];
  OrgOcpsoftPrettytimeImplDurationImpl *result = [[OrgOcpsoftPrettytimeImplDurationImpl alloc] init];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(localUnits)) size]; i++) {
    id<OrgOcpsoftPrettytimeTimeUnit> unit = [localUnits getWithInt:i];
    jlong millisPerUnit = JavaLangMath_absWithLong_([((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk(unit)) getMillisPerUnit]);
    jlong quantity = JavaLangMath_absWithLong_([unit getMaxQuantity]);
    jboolean isLastUnit = i == [localUnits size] - 1;
    if ((0 == quantity) && !isLastUnit) {
      quantity = [((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk([localUnits getWithInt:i + 1])) getMillisPerUnit] / [unit getMillisPerUnit];
    }
    if ((millisPerUnit * quantity > absoluteDifference) || isLastUnit) {
      [result setUnitWithOrgOcpsoftPrettytimeTimeUnit:unit];
      if (millisPerUnit > absoluteDifference) {
        [result setQuantityWithLong:[self getSignWithLong:difference]];
        [result setDeltaWithLong:0];
      }
      else {
        [result setQuantityWithLong:difference / millisPerUnit];
        [result setDeltaWithLong:difference - [result getQuantity] * millisPerUnit];
      }
      break;
    }
  }
  return result;
}

- (jlong)getSignWithLong:(jlong)difference {
  if (0 > difference) {
    return -1;
  }
  else {
    return 1;
  }
}

- (id<JavaUtilList>)calculatePreciseDurationWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Date to calculate must not be null."];
  if (nil == reference_) reference_ = [[JavaUtilDate alloc] init];
  id<JavaUtilList> result = [[JavaUtilArrayList alloc] init];
  jlong difference = [((JavaUtilDate *) nil_chk(then)) getTime] - [((JavaUtilDate *) nil_chk(reference_)) getTime];
  id<OrgOcpsoftPrettytimeDuration> duration = [self calculateDurationWithLong:difference];
  [result addWithId:duration];
  while (0 != [((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getDelta]) {
    duration = [self calculateDurationWithLong:[duration getDelta]];
    [result addWithId:duration];
  }
  return result;
}

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Date to format must not be null."];
  id<OrgOcpsoftPrettytimeDuration> d = [self approximateDurationWithJavaUtilDate:then];
  return [self formatWithOrgOcpsoftPrettytimeDuration:d];
}

- (NSString *)formatWithJavaUtilCalendar:(JavaUtilCalendar *)then {
  if (then == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Provided Calendar must not be null."];
  return [self formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(then)) getTime]];
}

- (NSString *)formatUnroundedWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Date to format must not be null."];
  id<OrgOcpsoftPrettytimeDuration> d = [self approximateDurationWithJavaUtilDate:then];
  return [self formatUnroundedWithOrgOcpsoftPrettytimeDuration:d];
}

- (NSString *)formatWithOrgOcpsoftPrettytimeDuration:(id<OrgOcpsoftPrettytimeDuration>)duration {
  if (duration == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Duration to format must not be null."];
  id<OrgOcpsoftPrettytimeTimeFormat> format = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
  NSString *time = [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatWithOrgOcpsoftPrettytimeDuration:duration];
  return [format decorateWithOrgOcpsoftPrettytimeDuration:duration withNSString:time];
}

- (NSString *)formatUnroundedWithOrgOcpsoftPrettytimeDuration:(id<OrgOcpsoftPrettytimeDuration>)duration {
  if (duration == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Duration to format must not be null."];
  id<OrgOcpsoftPrettytimeTimeFormat> format = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
  NSString *time = [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatUnroundedWithOrgOcpsoftPrettytimeDuration:duration];
  return [format decorateUnroundedWithOrgOcpsoftPrettytimeDuration:duration withNSString:time];
}

- (NSString *)formatWithJavaUtilList:(id<JavaUtilList>)durations {
  if (durations == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Duration list must not be null."];
  NSString *result = nil;
  if (durations != nil) {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    id<OrgOcpsoftPrettytimeDuration> duration = nil;
    id<OrgOcpsoftPrettytimeTimeFormat> format = nil;
    for (jint i = 0; i < [durations size]; i++) {
      duration = [durations getWithInt:i];
      format = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
      jboolean isLast = i == [durations size] - 1;
      if (!isLast) {
        (void) [builder appendWithNSString:[((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatUnroundedWithOrgOcpsoftPrettytimeDuration:duration]];
        (void) [builder appendWithNSString:@" "];
      }
      else {
        (void) [builder appendWithNSString:[((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatWithOrgOcpsoftPrettytimeDuration:duration]];
      }
    }
    result = [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) decorateUnroundedWithOrgOcpsoftPrettytimeDuration:duration withNSString:[builder description]];
  }
  return result;
}

- (NSString *)formatApproximateDurationWithJavaUtilDate:(JavaUtilDate *)date {
  id<OrgOcpsoftPrettytimeDuration> duration = [self approximateDurationWithJavaUtilDate:date];
  return [self formatDurationWithOrgOcpsoftPrettytimeDuration:duration];
}

- (NSString *)formatDurationWithOrgOcpsoftPrettytimeDuration:(id<OrgOcpsoftPrettytimeDuration>)duration {
  id<OrgOcpsoftPrettytimeTimeFormat> timeFormat = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
  return [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(timeFormat)) formatWithOrgOcpsoftPrettytimeDuration:duration];
}

- (id<OrgOcpsoftPrettytimeTimeFormat>)getFormatWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit {
  if (unit == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Time unit must not be null."];
  if ([((id<JavaUtilMap>) nil_chk(units_)) getWithId:unit] != nil) {
    return [units_ getWithId:unit];
  }
  return nil;
}

- (JavaUtilDate *)getReference {
  return reference_;
}

- (OrgOcpsoftPrettytimePrettyTime *)setReferenceWithJavaUtilDate:(JavaUtilDate *)timestamp {
  reference_ = timestamp;
  return self;
}

- (id<JavaUtilList>)getUnits {
  if (mCachedUnits_ == nil) {
    id<JavaUtilList> result = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(units_)) keySet]];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(result, [[OrgOcpsoftPrettytimeUnitsTimeUnitComparator alloc] init]);
    mCachedUnits_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(result);
  }
  return mCachedUnits_;
}

- (id)getUnitWithIOSClass:(IOSClass *)unitType {
  if (unitType == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unit type to get must not be null."];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong unit in nil_chk([((id<JavaUtilMap>) nil_chk(units_)) keySet])) {
    if ([((IOSClass *) nil_chk(unitType)) isAssignableFrom:[((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk(unit)) getClass]]) {
      return (id<OrgOcpsoftPrettytimeTimeUnit>) check_protocol_cast(unit, @protocol(OrgOcpsoftPrettytimeTimeUnit));
    }
  }
  return nil;
}

- (OrgOcpsoftPrettytimePrettyTime *)registerUnitWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit
                                              withOrgOcpsoftPrettytimeTimeFormat:(id<OrgOcpsoftPrettytimeTimeFormat>)format {
  if (unit == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unit to register must not be null."];
  if (format == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Format to register must not be null."];
  mCachedUnits_ = nil;
  (void) [((id<JavaUtilMap>) nil_chk(units_)) putWithId:unit withId:format];
  if ([(id) unit conformsToProtocol: @protocol(OrgOcpsoftPrettytimeLocaleAware)]) (void) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(unit, @protocol(OrgOcpsoftPrettytimeLocaleAware))))) setLocaleWithJavaUtilLocale:locale_];
  if ([(id) format conformsToProtocol: @protocol(OrgOcpsoftPrettytimeLocaleAware)]) (void) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(format, @protocol(OrgOcpsoftPrettytimeLocaleAware))))) setLocaleWithJavaUtilLocale:locale_];
  return self;
}

- (id<OrgOcpsoftPrettytimeTimeFormat>)removeUnitWithIOSClass:(IOSClass *)unitType {
  if (unitType == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unit type to remove must not be null."];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong unit in nil_chk([((id<JavaUtilMap>) nil_chk(units_)) keySet])) {
    if ([((IOSClass *) nil_chk(unitType)) isAssignableFrom:[((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk(unit)) getClass]]) {
      mCachedUnits_ = nil;
      return [units_ removeWithId:unit];
    }
  }
  return nil;
}

- (id<OrgOcpsoftPrettytimeTimeFormat>)removeUnitWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit {
  if (unit == nil) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Unit to remove must not be null."];
  mCachedUnits_ = nil;
  return [((id<JavaUtilMap>) nil_chk(units_)) removeWithId:unit];
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (OrgOcpsoftPrettytimePrettyTime *)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  self->locale_ = locale;
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong unit in nil_chk([((id<JavaUtilMap>) nil_chk(units_)) keySet])) {
    if ([(id) unit conformsToProtocol: @protocol(OrgOcpsoftPrettytimeLocaleAware)]) (void) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(unit, @protocol(OrgOcpsoftPrettytimeLocaleAware))))) setLocaleWithJavaUtilLocale:locale];
  }
  for (id<OrgOcpsoftPrettytimeTimeFormat> __strong format in nil_chk([units_ values])) {
    if ([(id) format conformsToProtocol: @protocol(OrgOcpsoftPrettytimeLocaleAware)]) (void) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(format, @protocol(OrgOcpsoftPrettytimeLocaleAware))))) setLocaleWithJavaUtilLocale:locale];
  }
  return self;
}

- (NSString *)description {
  return JreStrcat("$@$@C", @"PrettyTime [reference=", reference_, @", locale=", locale_, ']');
}

- (id<JavaUtilList>)clearUnits {
  id<JavaUtilList> result = [self getUnits];
  mCachedUnits_ = nil;
  [((id<JavaUtilMap>) nil_chk(units_)) clear];
  return result;
}

- (void)copyAllFieldsTo:(OrgOcpsoftPrettytimePrettyTime *)other {
  [super copyAllFieldsTo:other];
  other->reference_ = reference_;
  other->locale_ = locale_;
  other->units_ = units_;
  other->mCachedUnits_ = mCachedUnits_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PrettyTime", NULL, 0x1, NULL },
    { "initWithJavaUtilDate:", "PrettyTime", NULL, 0x1, NULL },
    { "initWithJavaUtilLocale:", "PrettyTime", NULL, 0x1, NULL },
    { "initWithJavaUtilDate:withJavaUtilLocale:", "PrettyTime", NULL, 0x1, NULL },
    { "approximateDurationWithJavaUtilDate:", "approximateDuration", "Lorg.ocpsoft.prettytime.Duration;", 0x1, NULL },
    { "initTimeUnits", NULL, "V", 0x2, NULL },
    { "addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:", "addUnit", "V", 0x2, NULL },
    { "calculateDurationWithLong:", "calculateDuration", "Lorg.ocpsoft.prettytime.Duration;", 0x2, NULL },
    { "getSignWithLong:", "getSign", "J", 0x2, NULL },
    { "calculatePreciseDurationWithJavaUtilDate:", "calculatePreciseDuration", "Ljava.util.List;", 0x1, NULL },
    { "formatWithJavaUtilDate:", "format", "Ljava.lang.String;", 0x1, NULL },
    { "formatWithJavaUtilCalendar:", "format", "Ljava.lang.String;", 0x1, NULL },
    { "formatUnroundedWithJavaUtilDate:", "formatUnrounded", "Ljava.lang.String;", 0x1, NULL },
    { "formatWithOrgOcpsoftPrettytimeDuration:", "format", "Ljava.lang.String;", 0x1, NULL },
    { "formatUnroundedWithOrgOcpsoftPrettytimeDuration:", "formatUnrounded", "Ljava.lang.String;", 0x1, NULL },
    { "formatWithJavaUtilList:", "format", "Ljava.lang.String;", 0x1, NULL },
    { "formatApproximateDurationWithJavaUtilDate:", "formatApproximateDuration", "Ljava.lang.String;", 0x1, NULL },
    { "formatDurationWithOrgOcpsoftPrettytimeDuration:", "formatDuration", "Ljava.lang.String;", 0x1, NULL },
    { "getFormatWithOrgOcpsoftPrettytimeTimeUnit:", "getFormat", "Lorg.ocpsoft.prettytime.TimeFormat;", 0x1, NULL },
    { "getReference", NULL, "Ljava.util.Date;", 0x1, NULL },
    { "setReferenceWithJavaUtilDate:", "setReference", "Lorg.ocpsoft.prettytime.PrettyTime;", 0x1, NULL },
    { "getUnits", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getUnitWithIOSClass:", "getUnit", "TUNIT;", 0x1, NULL },
    { "registerUnitWithOrgOcpsoftPrettytimeTimeUnit:withOrgOcpsoftPrettytimeTimeFormat:", "registerUnit", "Lorg.ocpsoft.prettytime.PrettyTime;", 0x1, NULL },
    { "removeUnitWithIOSClass:", "removeUnit", "Lorg.ocpsoft.prettytime.TimeFormat;", 0x1, NULL },
    { "removeUnitWithOrgOcpsoftPrettytimeTimeUnit:", "removeUnit", "Lorg.ocpsoft.prettytime.TimeFormat;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "Lorg.ocpsoft.prettytime.PrettyTime;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "clearUnits", NULL, "Ljava.util.List;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reference_", NULL, 0x42, "Ljava.util.Date;", NULL,  },
    { "locale_", NULL, 0x42, "Ljava.util.Locale;", NULL,  },
    { "units_", NULL, 0x42, "Ljava.util.Map;", NULL,  },
    { "mCachedUnits_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _OrgOcpsoftPrettytimePrettyTime = { "PrettyTime", "org.ocpsoft.prettytime", NULL, 0x1, 30, methods, 4, fields, 0, NULL};
  return &_OrgOcpsoftPrettytimePrettyTime;
}

@end
