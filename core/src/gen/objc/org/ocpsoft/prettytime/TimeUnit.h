//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/andrefonseca/Documents/PodsFolders/prettytime/core/src/main/java/org/ocpsoft/prettytime/TimeUnit.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgOcpsoftPrettytimeTimeUnit_INCLUDE_ALL")
#ifdef OrgOcpsoftPrettytimeTimeUnit_RESTRICT
#define OrgOcpsoftPrettytimeTimeUnit_INCLUDE_ALL 0
#else
#define OrgOcpsoftPrettytimeTimeUnit_INCLUDE_ALL 1
#endif
#undef OrgOcpsoftPrettytimeTimeUnit_RESTRICT

#if !defined (OrgOcpsoftPrettytimeTimeUnit_) && (OrgOcpsoftPrettytimeTimeUnit_INCLUDE_ALL || defined(OrgOcpsoftPrettytimeTimeUnit_INCLUDE))
#define OrgOcpsoftPrettytimeTimeUnit_

/*!
 @brief Defines a Unit of time (e.g. seconds, minutes, hours) and its conversion to milliseconds.
 @author <a href="mailto:lincolnbaxter@@gmail.com">Lincoln Baxter, III</a>
 */
@protocol OrgOcpsoftPrettytimeTimeUnit < NSObject, JavaObject >

/*!
 @brief The number of milliseconds represented by each instance of this TimeUnit.
 Must be a positive number greater than zero.
 */
- (jlong)getMillisPerUnit;

/*!
 @brief The maximum quantity of this Unit to be used as a threshold for the next
 largest Unit (e.g. if one <code>Second</code> represents 1000ms, and
 <code>Second</code> has a maxQuantity of 5, then if the difference
 between compared timestamps is larger than 5000ms, PrettyTime will move
 on to the next smallest TimeUnit for calculation; <code>Minute</code>, by
 default)
 <p>
 millisPerUnit * maxQuantity = maxAllowedMs
 <p>
 If maxQuantity is zero, it will be equal to the next highest
 <code>TimeUnit.getMillisPerUnit() /
 this.getMillisPerUnit()</code> or infinity if there are no greater
 TimeUnits
 */
- (jlong)getMaxQuantity;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOcpsoftPrettytimeTimeUnit)

J2OBJC_TYPE_LITERAL_HEADER(OrgOcpsoftPrettytimeTimeUnit)

#endif

#pragma pop_macro("OrgOcpsoftPrettytimeTimeUnit_INCLUDE_ALL")
