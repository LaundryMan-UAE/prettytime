//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/Laundryman/Libraries/prettytime/core/src/main/java/org/ocpsoft/prettytime/impl/DurationImpl.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/ocpsoft/prettytime/TimeUnit.h"
#include "org/ocpsoft/prettytime/impl/DurationImpl.h"

@interface OrgOcpsoftPrettytimeImplDurationImpl () {
 @public
  jlong quantity_;
  jlong delta_;
  id<OrgOcpsoftPrettytimeTimeUnit> unit_;
}

@end

J2OBJC_FIELD_SETTER(OrgOcpsoftPrettytimeImplDurationImpl, unit_, id<OrgOcpsoftPrettytimeTimeUnit>)

@implementation OrgOcpsoftPrettytimeImplDurationImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOcpsoftPrettytimeImplDurationImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)getQuantity {
  return quantity_;
}

- (void)setQuantityWithLong:(jlong)quantity {
  self->quantity_ = quantity;
}

- (id<OrgOcpsoftPrettytimeTimeUnit>)getUnit {
  return unit_;
}

- (void)setUnitWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit {
  JreStrongAssign(&self->unit_, unit);
}

- (jlong)getDelta {
  return delta_;
}

- (void)setDeltaWithLong:(jlong)delta {
  self->delta_ = delta;
}

- (jboolean)isInPast {
  return [self getQuantity] < 0;
}

- (jboolean)isInFuture {
  return ![self isInPast];
}

- (jlong)getQuantityRoundedWithInt:(jint)tolerance {
  jlong quantity = JavaLangMath_absWithLong_([self getQuantity]);
  if ([self getDelta] != 0) {
    jdouble threshold = JavaLangMath_absWithDouble_(((jdouble) [self getDelta] / (jdouble) [((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk([self getUnit])) getMillisPerUnit]) * 100);
    if (threshold > tolerance) {
      quantity = quantity + 1;
    }
  }
  return quantity;
}

- (void)dealloc {
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgOcpsoftPrettytimeTimeUnit;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getQuantity);
  methods[2].selector = @selector(setQuantityWithLong:);
  methods[3].selector = @selector(getUnit);
  methods[4].selector = @selector(setUnitWithOrgOcpsoftPrettytimeTimeUnit:);
  methods[5].selector = @selector(getDelta);
  methods[6].selector = @selector(setDeltaWithLong:);
  methods[7].selector = @selector(isInPast);
  methods[8].selector = @selector(isInFuture);
  methods[9].selector = @selector(getQuantityRoundedWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "quantity_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delta_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unit_", "LOrgOcpsoftPrettytimeTimeUnit;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setQuantity", "J", "setUnit", "LOrgOcpsoftPrettytimeTimeUnit;", "setDelta", "getQuantityRounded", "I" };
  static const J2ObjcClassInfo _OrgOcpsoftPrettytimeImplDurationImpl = { "DurationImpl", "org.ocpsoft.prettytime.impl", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_OrgOcpsoftPrettytimeImplDurationImpl;
}

@end

void OrgOcpsoftPrettytimeImplDurationImpl_init(OrgOcpsoftPrettytimeImplDurationImpl *self) {
  NSObject_init(self);
}

OrgOcpsoftPrettytimeImplDurationImpl *new_OrgOcpsoftPrettytimeImplDurationImpl_init() {
  J2OBJC_NEW_IMPL(OrgOcpsoftPrettytimeImplDurationImpl, init)
}

OrgOcpsoftPrettytimeImplDurationImpl *create_OrgOcpsoftPrettytimeImplDurationImpl_init() {
  J2OBJC_CREATE_IMPL(OrgOcpsoftPrettytimeImplDurationImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOcpsoftPrettytimeImplDurationImpl)
