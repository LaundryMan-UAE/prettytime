//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/HambroPerks/hambroperks_org/prettytime/core/src/main/java/org/ocpsoft/prettytime/PrettyTime.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/ocpsoft/prettytime/Duration.h"
#include "org/ocpsoft/prettytime/LocaleAware.h"
#include "org/ocpsoft/prettytime/PrettyTime.h"
#include "org/ocpsoft/prettytime/TimeFormat.h"
#include "org/ocpsoft/prettytime/TimeUnit.h"
#include "org/ocpsoft/prettytime/impl/DurationImpl.h"
#include "org/ocpsoft/prettytime/impl/ResourcesTimeFormat.h"
#include "org/ocpsoft/prettytime/impl/ResourcesTimeUnit.h"
#include "org/ocpsoft/prettytime/units/Century.h"
#include "org/ocpsoft/prettytime/units/Day.h"
#include "org/ocpsoft/prettytime/units/Decade.h"
#include "org/ocpsoft/prettytime/units/Hour.h"
#include "org/ocpsoft/prettytime/units/JustNow.h"
#include "org/ocpsoft/prettytime/units/Millennium.h"
#include "org/ocpsoft/prettytime/units/Millisecond.h"
#include "org/ocpsoft/prettytime/units/Minute.h"
#include "org/ocpsoft/prettytime/units/Month.h"
#include "org/ocpsoft/prettytime/units/Second.h"
#include "org/ocpsoft/prettytime/units/TimeUnitComparator.h"
#include "org/ocpsoft/prettytime/units/Week.h"
#include "org/ocpsoft/prettytime/units/Year.h"

@interface OrgOcpsoftPrettytimePrettyTime () {
 @public
  volatile_id reference_;
  volatile_id locale_;
  volatile_id units_;
  id<JavaUtilList> mCachedUnits_;
}

- (void)initTimeUnits OBJC_METHOD_FAMILY_NONE;

- (void)addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:(OrgOcpsoftPrettytimeImplResourcesTimeUnit *)unit;

- (id<OrgOcpsoftPrettytimeDuration>)calculateDurationWithLong:(jlong)difference;

- (jlong)getSignWithLong:(jlong)difference;

@end

J2OBJC_VOLATILE_FIELD_SETTER(OrgOcpsoftPrettytimePrettyTime, reference_, JavaUtilDate *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgOcpsoftPrettytimePrettyTime, locale_, JavaUtilLocale *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgOcpsoftPrettytimePrettyTime, units_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOcpsoftPrettytimePrettyTime, mCachedUnits_, id<JavaUtilList>)

__attribute__((unused)) static void OrgOcpsoftPrettytimePrettyTime_initTimeUnits(OrgOcpsoftPrettytimePrettyTime *self);

__attribute__((unused)) static void OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(OrgOcpsoftPrettytimePrettyTime *self, OrgOcpsoftPrettytimeImplResourcesTimeUnit *unit);

__attribute__((unused)) static id<OrgOcpsoftPrettytimeDuration> OrgOcpsoftPrettytimePrettyTime_calculateDurationWithLong_(OrgOcpsoftPrettytimePrettyTime *self, jlong difference);

__attribute__((unused)) static jlong OrgOcpsoftPrettytimePrettyTime_getSignWithLong_(OrgOcpsoftPrettytimePrettyTime *self, jlong difference);

@implementation OrgOcpsoftPrettytimePrettyTime

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOcpsoftPrettytimePrettyTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)reference {
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_(self, reference);
  return self;
}

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)reference
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_withJavaUtilLocale_(self, reference, locale);
  return self;
}

- (id<OrgOcpsoftPrettytimeDuration>)approximateDurationWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Date to approximate must not be null.") autorelease];
  JavaUtilDate *ref = JreLoadVolatileId(&reference_);
  if (nil == ref) ref = [new_JavaUtilDate_init() autorelease];
  jlong difference = [((JavaUtilDate *) nil_chk(then)) getTime] - [((JavaUtilDate *) nil_chk(ref)) getTime];
  return OrgOcpsoftPrettytimePrettyTime_calculateDurationWithLong_(self, difference);
}

- (void)initTimeUnits {
  OrgOcpsoftPrettytimePrettyTime_initTimeUnits(self);
}

- (void)addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:(OrgOcpsoftPrettytimeImplResourcesTimeUnit *)unit {
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, unit);
}

- (id<OrgOcpsoftPrettytimeDuration>)calculateDurationWithLong:(jlong)difference {
  return OrgOcpsoftPrettytimePrettyTime_calculateDurationWithLong_(self, difference);
}

- (jlong)getSignWithLong:(jlong)difference {
  return OrgOcpsoftPrettytimePrettyTime_getSignWithLong_(self, difference);
}

- (id<JavaUtilList>)calculatePreciseDurationWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Date to calculate must not be null.") autorelease];
  if (nil == JreLoadVolatileId(&reference_)) JreVolatileStrongAssignAndConsume(&reference_, new_JavaUtilDate_init());
  id<JavaUtilList> result = [new_JavaUtilArrayList_init() autorelease];
  jlong difference = [((JavaUtilDate *) nil_chk(then)) getTime] - [((JavaUtilDate *) nil_chk(JreLoadVolatileId(&reference_))) getTime];
  id<OrgOcpsoftPrettytimeDuration> duration = OrgOcpsoftPrettytimePrettyTime_calculateDurationWithLong_(self, difference);
  [result addWithId:duration];
  while (0 != [((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getDelta]) {
    duration = OrgOcpsoftPrettytimePrettyTime_calculateDurationWithLong_(self, [duration getDelta]);
    [result addWithId:duration];
  }
  return result;
}

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Date to format must not be null.") autorelease];
  id<OrgOcpsoftPrettytimeDuration> d = [self approximateDurationWithJavaUtilDate:then];
  return [self formatWithOrgOcpsoftPrettytimeDuration:d];
}

- (NSString *)formatWithJavaUtilCalendar:(JavaUtilCalendar *)then {
  if (then == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Provided Calendar must not be null.") autorelease];
  return [self formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(then)) getTime]];
}

- (NSString *)formatUnroundedWithJavaUtilDate:(JavaUtilDate *)then {
  if (then == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Date to format must not be null.") autorelease];
  id<OrgOcpsoftPrettytimeDuration> d = [self approximateDurationWithJavaUtilDate:then];
  return [self formatUnroundedWithOrgOcpsoftPrettytimeDuration:d];
}

- (NSString *)formatWithOrgOcpsoftPrettytimeDuration:(id<OrgOcpsoftPrettytimeDuration>)duration {
  if (duration == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Duration to format must not be null.") autorelease];
  id<OrgOcpsoftPrettytimeTimeFormat> format = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
  NSString *time = [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatWithOrgOcpsoftPrettytimeDuration:duration];
  return [format decorateWithOrgOcpsoftPrettytimeDuration:duration withNSString:time];
}

- (NSString *)formatUnroundedWithOrgOcpsoftPrettytimeDuration:(id<OrgOcpsoftPrettytimeDuration>)duration {
  if (duration == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Duration to format must not be null.") autorelease];
  id<OrgOcpsoftPrettytimeTimeFormat> format = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
  NSString *time = [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatUnroundedWithOrgOcpsoftPrettytimeDuration:duration];
  return [format decorateUnroundedWithOrgOcpsoftPrettytimeDuration:duration withNSString:time];
}

- (NSString *)formatWithJavaUtilList:(id<JavaUtilList>)durations {
  if (durations == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Duration list must not be null.") autorelease];
  NSString *result = nil;
  if (durations != nil) {
    JavaLangStringBuilder *builder = [new_JavaLangStringBuilder_init() autorelease];
    id<OrgOcpsoftPrettytimeDuration> duration = nil;
    id<OrgOcpsoftPrettytimeTimeFormat> format = nil;
    for (jint i = 0; i < [durations size]; i++) {
      duration = [durations getWithInt:i];
      format = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
      jboolean isLast = i == [durations size] - 1;
      if (!isLast) {
        [builder appendWithNSString:[((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatUnroundedWithOrgOcpsoftPrettytimeDuration:duration]];
        [builder appendWithNSString:@" "];
      }
      else {
        [builder appendWithNSString:[((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) formatWithOrgOcpsoftPrettytimeDuration:duration]];
      }
    }
    result = [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(format)) decorateUnroundedWithOrgOcpsoftPrettytimeDuration:duration withNSString:[builder description]];
  }
  return result;
}

- (NSString *)formatApproximateDurationWithJavaUtilDate:(JavaUtilDate *)date {
  id<OrgOcpsoftPrettytimeDuration> duration = [self approximateDurationWithJavaUtilDate:date];
  return [self formatDurationWithOrgOcpsoftPrettytimeDuration:duration];
}

- (NSString *)formatDurationWithOrgOcpsoftPrettytimeDuration:(id<OrgOcpsoftPrettytimeDuration>)duration {
  id<OrgOcpsoftPrettytimeTimeFormat> timeFormat = [self getFormatWithOrgOcpsoftPrettytimeTimeUnit:[((id<OrgOcpsoftPrettytimeDuration>) nil_chk(duration)) getUnit]];
  return [((id<OrgOcpsoftPrettytimeTimeFormat>) nil_chk(timeFormat)) formatWithOrgOcpsoftPrettytimeDuration:duration];
}

- (id<OrgOcpsoftPrettytimeTimeFormat>)getFormatWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit {
  if (unit == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Time unit must not be null.") autorelease];
  if ([((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) getWithId:unit] != nil) {
    return [((id<JavaUtilMap>) JreLoadVolatileId(&units_)) getWithId:unit];
  }
  return nil;
}

- (JavaUtilDate *)getReference {
  return JreLoadVolatileId(&reference_);
}

- (OrgOcpsoftPrettytimePrettyTime *)setReferenceWithJavaUtilDate:(JavaUtilDate *)timestamp {
  JreVolatileStrongAssign(&reference_, timestamp);
  return self;
}

- (id<JavaUtilList>)getUnits {
  if (mCachedUnits_ == nil) {
    id<JavaUtilList> result = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) keySet]) autorelease];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(result, [new_OrgOcpsoftPrettytimeUnitsTimeUnitComparator_init() autorelease]);
    JreStrongAssign(&mCachedUnits_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(result));
  }
  return mCachedUnits_;
}

- (id)getUnitWithIOSClass:(IOSClass *)unitType {
  if (unitType == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Unit type to get must not be null.") autorelease];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong unit in nil_chk([((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) keySet])) {
    if ([((IOSClass *) nil_chk(unitType)) isAssignableFrom:[((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk(unit)) getClass]]) {
      return (id<OrgOcpsoftPrettytimeTimeUnit>) check_protocol_cast(unit, OrgOcpsoftPrettytimeTimeUnit_class_());
    }
  }
  return nil;
}

- (OrgOcpsoftPrettytimePrettyTime *)registerUnitWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit
                                              withOrgOcpsoftPrettytimeTimeFormat:(id<OrgOcpsoftPrettytimeTimeFormat>)format {
  if (unit == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Unit to register must not be null.") autorelease];
  if (format == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Format to register must not be null.") autorelease];
  JreStrongAssign(&mCachedUnits_, nil);
  [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) putWithId:unit withId:format];
  if ([OrgOcpsoftPrettytimeLocaleAware_class_() isInstance:unit]) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(unit, OrgOcpsoftPrettytimeLocaleAware_class_())))) setLocaleWithJavaUtilLocale:JreLoadVolatileId(&locale_)];
  if ([OrgOcpsoftPrettytimeLocaleAware_class_() isInstance:format]) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(format, OrgOcpsoftPrettytimeLocaleAware_class_())))) setLocaleWithJavaUtilLocale:JreLoadVolatileId(&locale_)];
  return self;
}

- (id<OrgOcpsoftPrettytimeTimeFormat>)removeUnitWithIOSClass:(IOSClass *)unitType {
  if (unitType == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Unit type to remove must not be null.") autorelease];
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong unit in nil_chk([((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) keySet])) {
    if ([((IOSClass *) nil_chk(unitType)) isAssignableFrom:[((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk(unit)) getClass]]) {
      JreStrongAssign(&mCachedUnits_, nil);
      return [((id<JavaUtilMap>) JreLoadVolatileId(&units_)) removeWithId:unit];
    }
  }
  return nil;
}

- (id<OrgOcpsoftPrettytimeTimeFormat>)removeUnitWithOrgOcpsoftPrettytimeTimeUnit:(id<OrgOcpsoftPrettytimeTimeUnit>)unit {
  if (unit == nil) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Unit to remove must not be null.") autorelease];
  JreStrongAssign(&mCachedUnits_, nil);
  return [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) removeWithId:unit];
}

- (JavaUtilLocale *)getLocale {
  return JreLoadVolatileId(&locale_);
}

- (OrgOcpsoftPrettytimePrettyTime *)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JreVolatileStrongAssign(&self->locale_, locale);
  for (id<OrgOcpsoftPrettytimeTimeUnit> __strong unit in nil_chk([((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) keySet])) {
    if ([OrgOcpsoftPrettytimeLocaleAware_class_() isInstance:unit]) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(unit, OrgOcpsoftPrettytimeLocaleAware_class_())))) setLocaleWithJavaUtilLocale:locale];
  }
  for (id<OrgOcpsoftPrettytimeTimeFormat> __strong format in nil_chk([((id<JavaUtilMap>) JreLoadVolatileId(&units_)) values])) {
    if ([OrgOcpsoftPrettytimeLocaleAware_class_() isInstance:format]) [((id<OrgOcpsoftPrettytimeLocaleAware>) nil_chk(((id<OrgOcpsoftPrettytimeLocaleAware>) check_protocol_cast(format, OrgOcpsoftPrettytimeLocaleAware_class_())))) setLocaleWithJavaUtilLocale:locale];
  }
  return self;
}

- (NSString *)description {
  return JreStrcat("$@$@C", @"PrettyTime [reference=", JreLoadVolatileId(&reference_), @", locale=", JreLoadVolatileId(&locale_), ']');
}

- (id<JavaUtilList>)clearUnits {
  id<JavaUtilList> result = [self getUnits];
  JreStrongAssign(&mCachedUnits_, nil);
  [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&units_))) clear];
  return result;
}

- (void)dealloc {
  JreReleaseVolatile(&reference_);
  JreReleaseVolatile(&locale_);
  JreReleaseVolatile(&units_);
  RELEASE_(mCachedUnits_);
  [super dealloc];
}

- (void)__javaClone {
  [super __javaClone];
  JreRetainVolatile(&reference_);
  JreRetainVolatile(&locale_);
  JreRetainVolatile(&units_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PrettyTime", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilDate:", "PrettyTime", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilLocale:", "PrettyTime", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilDate:withJavaUtilLocale:", "PrettyTime", NULL, 0x1, NULL, NULL },
    { "approximateDurationWithJavaUtilDate:", "approximateDuration", "Lorg.ocpsoft.prettytime.Duration;", 0x1, NULL, NULL },
    { "initTimeUnits", NULL, "V", 0x2, NULL, NULL },
    { "addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit:", "addUnit", "V", 0x2, NULL, NULL },
    { "calculateDurationWithLong:", "calculateDuration", "Lorg.ocpsoft.prettytime.Duration;", 0x2, NULL, NULL },
    { "getSignWithLong:", "getSign", "J", 0x2, NULL, NULL },
    { "calculatePreciseDurationWithJavaUtilDate:", "calculatePreciseDuration", "Ljava.util.List;", 0x1, NULL, NULL },
    { "formatWithJavaUtilDate:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatWithJavaUtilCalendar:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatUnroundedWithJavaUtilDate:", "formatUnrounded", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatWithOrgOcpsoftPrettytimeDuration:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatUnroundedWithOrgOcpsoftPrettytimeDuration:", "formatUnrounded", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatWithJavaUtilList:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatApproximateDurationWithJavaUtilDate:", "formatApproximateDuration", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatDurationWithOrgOcpsoftPrettytimeDuration:", "formatDuration", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFormatWithOrgOcpsoftPrettytimeTimeUnit:", "getFormat", "Lorg.ocpsoft.prettytime.TimeFormat;", 0x1, NULL, NULL },
    { "getReference", NULL, "Ljava.util.Date;", 0x1, NULL, NULL },
    { "setReferenceWithJavaUtilDate:", "setReference", "Lorg.ocpsoft.prettytime.PrettyTime;", 0x1, NULL, NULL },
    { "getUnits", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getUnitWithIOSClass:", "getUnit", "TUNIT;", 0x1, NULL, "<UNIT::Lorg/ocpsoft/prettytime/TimeUnit;>(Ljava/lang/Class<TUNIT;>;)TUNIT;" },
    { "registerUnitWithOrgOcpsoftPrettytimeTimeUnit:withOrgOcpsoftPrettytimeTimeFormat:", "registerUnit", "Lorg.ocpsoft.prettytime.PrettyTime;", 0x1, NULL, NULL },
    { "removeUnitWithIOSClass:", "removeUnit", "Lorg.ocpsoft.prettytime.TimeFormat;", 0x1, NULL, "<UNIT::Lorg/ocpsoft/prettytime/TimeUnit;>(Ljava/lang/Class<TUNIT;>;)Lorg/ocpsoft/prettytime/TimeFormat;" },
    { "removeUnitWithOrgOcpsoftPrettytimeTimeUnit:", "removeUnit", "Lorg.ocpsoft.prettytime.TimeFormat;", 0x1, NULL, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "Lorg.ocpsoft.prettytime.PrettyTime;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "clearUnits", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reference_", NULL, 0x42, "Ljava.util.Date;", NULL, NULL, .constantValue.asLong = 0 },
    { "locale_", NULL, 0x42, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
    { "units_", NULL, 0x42, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/ocpsoft/prettytime/TimeUnit;Lorg/ocpsoft/prettytime/TimeFormat;>;", .constantValue.asLong = 0 },
    { "mCachedUnits_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/ocpsoft/prettytime/TimeUnit;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOcpsoftPrettytimePrettyTime = { 2, "PrettyTime", "org.ocpsoft.prettytime", NULL, 0x1, 30, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOcpsoftPrettytimePrettyTime;
}

@end

void OrgOcpsoftPrettytimePrettyTime_init(OrgOcpsoftPrettytimePrettyTime *self) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
  JreVolatileStrongAssignAndConsume(&self->units_, new_JavaUtilLinkedHashMap_init());
  OrgOcpsoftPrettytimePrettyTime_initTimeUnits(self);
}

OrgOcpsoftPrettytimePrettyTime *new_OrgOcpsoftPrettytimePrettyTime_init() {
  OrgOcpsoftPrettytimePrettyTime *self = [OrgOcpsoftPrettytimePrettyTime alloc];
  OrgOcpsoftPrettytimePrettyTime_init(self);
  return self;
}

void OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_(OrgOcpsoftPrettytimePrettyTime *self, JavaUtilDate *reference) {
  OrgOcpsoftPrettytimePrettyTime_init(self);
  [self setReferenceWithJavaUtilDate:reference];
}

OrgOcpsoftPrettytimePrettyTime *new_OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_(JavaUtilDate *reference) {
  OrgOcpsoftPrettytimePrettyTime *self = [OrgOcpsoftPrettytimePrettyTime alloc];
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_(self, reference);
  return self;
}

void OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilLocale_(OrgOcpsoftPrettytimePrettyTime *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
  JreVolatileStrongAssignAndConsume(&self->units_, new_JavaUtilLinkedHashMap_init());
  [self setLocaleWithJavaUtilLocale:locale];
  OrgOcpsoftPrettytimePrettyTime_initTimeUnits(self);
}

OrgOcpsoftPrettytimePrettyTime *new_OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgOcpsoftPrettytimePrettyTime *self = [OrgOcpsoftPrettytimePrettyTime alloc];
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilLocale_(self, locale);
  return self;
}

void OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgOcpsoftPrettytimePrettyTime *self, JavaUtilDate *reference, JavaUtilLocale *locale) {
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilLocale_(self, locale);
  [self setReferenceWithJavaUtilDate:reference];
}

OrgOcpsoftPrettytimePrettyTime *new_OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *reference, JavaUtilLocale *locale) {
  OrgOcpsoftPrettytimePrettyTime *self = [OrgOcpsoftPrettytimePrettyTime alloc];
  OrgOcpsoftPrettytimePrettyTime_initWithJavaUtilDate_withJavaUtilLocale_(self, reference, locale);
  return self;
}

void OrgOcpsoftPrettytimePrettyTime_initTimeUnits(OrgOcpsoftPrettytimePrettyTime *self) {
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsJustNow_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsMillisecond_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsSecond_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsMinute_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsHour_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsDay_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsWeek_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsMonth_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsYear_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsDecade_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsCentury_init() autorelease]);
  OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(self, [new_OrgOcpsoftPrettytimeUnitsMillennium_init() autorelease]);
}

void OrgOcpsoftPrettytimePrettyTime_addUnitWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(OrgOcpsoftPrettytimePrettyTime *self, OrgOcpsoftPrettytimeImplResourcesTimeUnit *unit) {
  [self registerUnitWithOrgOcpsoftPrettytimeTimeUnit:unit withOrgOcpsoftPrettytimeTimeFormat:[new_OrgOcpsoftPrettytimeImplResourcesTimeFormat_initWithOrgOcpsoftPrettytimeImplResourcesTimeUnit_(unit) autorelease]];
}

id<OrgOcpsoftPrettytimeDuration> OrgOcpsoftPrettytimePrettyTime_calculateDurationWithLong_(OrgOcpsoftPrettytimePrettyTime *self, jlong difference) {
  jlong absoluteDifference = JavaLangMath_absWithLong_(difference);
  id<JavaUtilList> localUnits = [self getUnits];
  OrgOcpsoftPrettytimeImplDurationImpl *result = [new_OrgOcpsoftPrettytimeImplDurationImpl_init() autorelease];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(localUnits)) size]; i++) {
    id<OrgOcpsoftPrettytimeTimeUnit> unit = [localUnits getWithInt:i];
    jlong millisPerUnit = JavaLangMath_absWithLong_([((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk(unit)) getMillisPerUnit]);
    jlong quantity = JavaLangMath_absWithLong_([unit getMaxQuantity]);
    jboolean isLastUnit = i == [localUnits size] - 1;
    if ((0 == quantity) && !isLastUnit) {
      quantity = [((id<OrgOcpsoftPrettytimeTimeUnit>) nil_chk([localUnits getWithInt:i + 1])) getMillisPerUnit] / [unit getMillisPerUnit];
    }
    if ((millisPerUnit * quantity > absoluteDifference) || isLastUnit) {
      [result setUnitWithOrgOcpsoftPrettytimeTimeUnit:unit];
      if (millisPerUnit > absoluteDifference) {
        [result setQuantityWithLong:OrgOcpsoftPrettytimePrettyTime_getSignWithLong_(self, difference)];
        [result setDeltaWithLong:0];
      }
      else {
        [result setQuantityWithLong:difference / millisPerUnit];
        [result setDeltaWithLong:difference - [result getQuantity] * millisPerUnit];
      }
      break;
    }
  }
  return result;
}

jlong OrgOcpsoftPrettytimePrettyTime_getSignWithLong_(OrgOcpsoftPrettytimePrettyTime *self, jlong difference) {
  if (0 > difference) {
    return -1;
  }
  else {
    return 1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOcpsoftPrettytimePrettyTime)
